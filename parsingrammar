Parsing Grammar

program::= COMD* begin CommandBody* end.

COMD::= DecFunc
	    |DecVar
	    |DecProc
	    |Coment 

DecFunc::= function ID (LP*) : (bool|integer);
		   begin CommandBody* end;

DecProc::= procedure ID (LP*);
		   begin ComandBody* end;

DecVar::= var ID (, ID)* : (bool|integer);

Comment::= #ID #DÃ™VIDA

LP::= ID : (bool|integer) (; LP)*

ComandCorpo::= DecVar
			   |ID := Expression;
			   |CallFunc
			   |CallProc
			   |IfCommand
			   |WhileCommand
			   |Return
			   |Comment
			   |IDeviation
			   |WriteCommand

CallFunc::= ID (LA)

CallProc::= ID (LA);

IfCommand::= if BoolEx then begin CommandBody+ end; (else begin CommandBody end;)?
			 |if BoolEx then CommandBody+ (else CommandBody+)?

WhileCommand::= while BoolEx do begin CommandBody+ end;
				|while BoolEx do CommandBody+

IDeviation::= break;
			  |continue;

Return::= ID := Expression;

WriteCommand::= writeln((('ID')*|((ID|CallFunc)))*(, (ID|CallFunc))*);

LA::= 

Expression::= AEx
			  |BoolEx
